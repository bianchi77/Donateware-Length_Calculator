void lcd_init (void)
{
	// 4 bit initialisation
	nrf_delay_ms(50);  // wait for >40ms
	lcd_send_cmd (0x03);
	nrf_delay_ms(5);  // wait for >4.1ms
	lcd_send_cmd (0x03);
	nrf_delay_us(200);  // wait for >100us
	lcd_send_cmd (0x03);
	nrf_delay_us(200);
	lcd_send_cmd (0x02);  // 4bit mode
	nrf_delay_ms(10);
		

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	nrf_delay_ms(1);
	
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	nrf_delay_ms(1);
	lcd_send_cmd (0x01);  // clear display
	nrf_delay_ms(1);
	nrf_delay_ms(1);
	// Initialize to default text direction (for roman languages)
	//_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	//lcd_send_cmd(LCD_ENTRYMODESET | _displaymode);
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	nrf_delay_ms(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
	   nrf_delay_ms(1);
		 lcd_send_cmd(LCD_RETURNHOME);
	
}

void lcd_send_string (char *str)
{
	while (*str) lcd_send_data (*str++);
}

void lcd_setCursor(uint8_t col, uint8_t row){
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	//int row_offsets[] = { 0x80, 0x81, 0x82, 0x83 };
	uint8_t _numlines;
	_numlines =4;
	if ( row > _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}
	lcd_send_cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}

// clear everything 20x4
void lcd_clear(void)
{
  lcd_send_cmd (0x01);  // clear display
	nrf_delay_ms(1);
}